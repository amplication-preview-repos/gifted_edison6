/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ClickEvent } from "./ClickEvent";
import { ClickEventCountArgs } from "./ClickEventCountArgs";
import { ClickEventFindManyArgs } from "./ClickEventFindManyArgs";
import { ClickEventFindUniqueArgs } from "./ClickEventFindUniqueArgs";
import { CreateClickEventArgs } from "./CreateClickEventArgs";
import { UpdateClickEventArgs } from "./UpdateClickEventArgs";
import { DeleteClickEventArgs } from "./DeleteClickEventArgs";
import { GameSession } from "../../gameSession/base/GameSession";
import { ClickEventService } from "../clickEvent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ClickEvent)
export class ClickEventResolverBase {
  constructor(
    protected readonly service: ClickEventService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ClickEvent",
    action: "read",
    possession: "any",
  })
  async _clickEventsMeta(
    @graphql.Args() args: ClickEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ClickEvent])
  @nestAccessControl.UseRoles({
    resource: "ClickEvent",
    action: "read",
    possession: "any",
  })
  async clickEvents(
    @graphql.Args() args: ClickEventFindManyArgs
  ): Promise<ClickEvent[]> {
    return this.service.clickEvents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ClickEvent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ClickEvent",
    action: "read",
    possession: "own",
  })
  async clickEvent(
    @graphql.Args() args: ClickEventFindUniqueArgs
  ): Promise<ClickEvent | null> {
    const result = await this.service.clickEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClickEvent)
  @nestAccessControl.UseRoles({
    resource: "ClickEvent",
    action: "create",
    possession: "any",
  })
  async createClickEvent(
    @graphql.Args() args: CreateClickEventArgs
  ): Promise<ClickEvent> {
    return await this.service.createClickEvent({
      ...args,
      data: {
        ...args.data,

        gameSession: args.data.gameSession
          ? {
              connect: args.data.gameSession,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClickEvent)
  @nestAccessControl.UseRoles({
    resource: "ClickEvent",
    action: "update",
    possession: "any",
  })
  async updateClickEvent(
    @graphql.Args() args: UpdateClickEventArgs
  ): Promise<ClickEvent | null> {
    try {
      return await this.service.updateClickEvent({
        ...args,
        data: {
          ...args.data,

          gameSession: args.data.gameSession
            ? {
                connect: args.data.gameSession,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClickEvent)
  @nestAccessControl.UseRoles({
    resource: "ClickEvent",
    action: "delete",
    possession: "any",
  })
  async deleteClickEvent(
    @graphql.Args() args: DeleteClickEventArgs
  ): Promise<ClickEvent | null> {
    try {
      return await this.service.deleteClickEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => GameSession, {
    nullable: true,
    name: "gameSession",
  })
  @nestAccessControl.UseRoles({
    resource: "GameSession",
    action: "read",
    possession: "any",
  })
  async getGameSession(
    @graphql.Parent() parent: ClickEvent
  ): Promise<GameSession | null> {
    const result = await this.service.getGameSession(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
