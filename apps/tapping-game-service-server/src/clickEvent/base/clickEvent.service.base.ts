/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ClickEvent as PrismaClickEvent,
  GameSession as PrismaGameSession,
} from "@prisma/client";

export class ClickEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClickEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clickEvent.count(args);
  }

  async clickEvents(
    args: Prisma.ClickEventFindManyArgs
  ): Promise<PrismaClickEvent[]> {
    return this.prisma.clickEvent.findMany(args);
  }
  async clickEvent(
    args: Prisma.ClickEventFindUniqueArgs
  ): Promise<PrismaClickEvent | null> {
    return this.prisma.clickEvent.findUnique(args);
  }
  async createClickEvent(
    args: Prisma.ClickEventCreateArgs
  ): Promise<PrismaClickEvent> {
    return this.prisma.clickEvent.create(args);
  }
  async updateClickEvent(
    args: Prisma.ClickEventUpdateArgs
  ): Promise<PrismaClickEvent> {
    return this.prisma.clickEvent.update(args);
  }
  async deleteClickEvent(
    args: Prisma.ClickEventDeleteArgs
  ): Promise<PrismaClickEvent> {
    return this.prisma.clickEvent.delete(args);
  }

  async getGameSession(parentId: string): Promise<PrismaGameSession | null> {
    return this.prisma.clickEvent
      .findUnique({
        where: { id: parentId },
      })
      .gameSession();
  }
}
